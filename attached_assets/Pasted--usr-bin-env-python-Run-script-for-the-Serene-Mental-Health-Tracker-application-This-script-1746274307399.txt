#!/usr/bin/env python
"""
Run script for the Serene Mental Health Tracker application
This script is used to run the application locally for development
"""

import os
from flask import Flask, send_from_directory
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager
from flask_session import Session
from flask_wtf.csrf import CSRFProtect
from dotenv import load_dotenv
from datetime import datetime

# Load environment variables
load_dotenv()

# Initialize extensions first (before importing anything else)
db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()
csrf = CSRFProtect()
sess = Session()

# Create Flask application
app = Flask(__name__, template_folder='ConsultantManager/app/templates')

# Configuration
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'dev-key-for-development-only')
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///serene.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SESSION_PERMANENT'] = False
app.config['PERMANENT_SESSION_LIFETIME'] = 1800  # 30 minutes

# Initialize extensions with the app
db.init_app(app)
migrate.init_app(app, db)
login_manager.init_app(app)
csrf.init_app(app)
sess.init_app(app)

# Set up login configuration
login_manager.login_view = 'auth.login'
login_manager.login_message = 'Please log in to access this page.'
login_manager.login_message_category = 'info'

# Template filters
@app.template_filter('formatdate')
def format_date_filter(date, format='%B %d, %Y'):
    """Format a date to a string with a given format"""
    if isinstance(date, str):
        try:
            date = datetime.strptime(date, '%Y-%m-%d')
        except ValueError:
            return date
    return date.strftime(format) if date else ''

# Context processors
@app.context_processor
def inject_now():
    """Inject the current datetime into templates"""
    return {'now': datetime.utcnow()}

# Register error handlers
@app.errorhandler(404)
def page_not_found(e):
    from flask import render_template
    return render_template('errors/404.html'), 404

@app.errorhandler(500)
def internal_server_error(e):
    from flask import render_template
    return render_template('errors/500.html'), 500

# Now we can import models and routes
# The db is now defined and can be imported into models
with app.app_context():
    # Import models
    from app.models.user import User
    from app.models.entry import Entry
    from app.models.subscription import Subscription
    
    # Create database tables
    db.create_all()
    
    # Import routes
    from app.routes.auth import auth
    from app.routes.main import main
    from app.routes.journal import journal
    from app.routes.games import games
    
    # Register blueprints
    app.register_blueprint(auth)
    app.register_blueprint(main)
    app.register_blueprint(journal)
    app.register_blueprint(games)

@app.route("/")
def serve():
    return send_from_directory(app.static_folder, "index.html")

@app.route('/<path:path>')
def static_proxy(path):
    return send_from_directory("frontend/build", path)

if __name__ == '__main__':
    # Run the app
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=True)